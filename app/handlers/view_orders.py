from datetime import datetime

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, InputMediaPhoto, InputMediaDocument
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.id_config import senders
from app.keyboards import async_keyboards as async_kb
from app.keyboards import static_keyboards as static_kb
from app.database.requests import order_request as order_rq
from app.database.requests import shipment_request as ship_rq
from app.database.requests import cheque_request as cheque_rq
from app.database.requests import fish_request as fish_rq
from app.utils.utils import enough_quantity_order, shipments_quantity_s, shipments_quantity_m, shipments_quantity_l, shipments_ready

from app.states.order import check_orders

router = Router()


@router.message(F.text == '–¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã')
async def check_all_orders(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id in senders:
        await state.set_state(check_orders.select_order)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑:', reply_markup=await async_kb.all_orders())


@router.callback_query(F.data.startswith('order_id_'), check_orders.select_order)
async def check_income_order_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    order_id = str(callback.data)[9:]
    order = await order_rq.get_order(order_id)
    await state.update_data(order=order, callback=callback, state=state)
    ship_s = await shipments_quantity_s(order_id)
    ship_m = await shipments_quantity_m(order_id)
    ship_l = await shipments_quantity_l(order_id)
    order_create_date = datetime.strptime(order.create_date, "%d-%m-%Y %H:%M:%S")
    caption = ''
    if order.flag:
        caption += f'üö© *–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω*\n'
    caption += (f'*–ê—Ä—Ç–∏–∫—É–ª:* _{order.internal_article}_\n'
               f'*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:* _{datetime.strftime(order_create_date, "%d-%m-%Y %H:%M")}_\n'
               f'*–¶–≤–µ—Ç:* _{order.color}_\n'
               f'*–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:* _{order.shop_name}_\n'
               f'*–°–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:* _{order.sending_method}_\n'
               f'*–ó–∞–∫–∞–∑–∞–Ω–æ:* *S:* _{order.quantity_s}_ *M:* _{order.quantity_m}_ *L:* _{order.quantity_l}_\n'
               f'*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* *S:* _{ship_s}_ *M:* _{ship_m}_ *L:* _{ship_l}_\n')
    if order.status != '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤':
        caption += f'üî¥ *–ó–∞–∫–∞–∑ –Ω–µ –≥–æ—Ç–æ–≤*\n'
    else:
        caption += f'üü¢ *–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤*\n'
    if not await enough_quantity_order(order_id):
        remain_s = order.quantity_s - ship_s
        remain_m = order.quantity_m - ship_m
        remain_l = order.quantity_l - ship_l
        await state.update_data(remain_s=remain_s, remain_m=remain_m, remain_l=remain_l)
        caption += f'üî¥ *–û–∂–∏–¥–∞–µ—Ç—Å—è* *S:* _{remain_s}_ *M:* _{remain_m}_ *L:* _{remain_l}_\n'
    else:
        caption += f'üü¢ *–ó–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*\n'
    if not await shipments_ready(order_id):
        caption += f'üî¥ *–ù–µ –≤—Å–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ WB*\n'
    else:
        caption += f'üü¢ *–í—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ WB*\n'
    media_list = [InputMediaPhoto(media=order.order_image, caption=caption, parse_mode="Markdown")]
    await callback.message.answer_media_group(media=media_list)
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=static_kb.active_order_actions)


@router.callback_query(F.data.startswith('all_data_shipment'))
async def check_income_order_2(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    shipment = data['shipment']
    cheque = await cheque_rq.get_cheque(shipment.id)
    fish = await fish_rq.get_fish(shipment.id)
    text = (f'------–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏------\n'
            f'*–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:* _{shipment.create_date}_\n'
            f'*–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:* _{shipment.change_date}_\n'
            f'*–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ S:* _{shipment.quantity_s}_ M: _{shipment.quantity_m}_ L: _{shipment.quantity_l}_\n'
            f'*–°—Ç–∞—Ç—É—Å:* _{shipment.status}_\n'
            f'*–°–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:* _{shipment.sending_method}_\n'
            f'------–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞------\n'
            f'*–î–∞—Ç–∞ —á–µ–∫–∞:* _{str(cheque.date)}_\n'
            f'*–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–∫–∞:* _{str(cheque.create_date)}_\n'
            f'*–ù–æ–º–µ—Ä —á–µ–∫–∞:* _{str(cheque.cheque_number)}_\n'
            f'*–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:* _{str(cheque.vendor_internal_article)}_\n'
            f'*–¶–µ–Ω–∞:* _{str(cheque.price)}_\n'
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:* _{str(cheque.shop_name)}_\n'
            f'*–°—Ç–∞—Ç—É—Å —á–µ–∫–∞:* _{str(cheque.cheque_status)}_\n'
            f'------–î–∞–Ω–Ω—ã–µ fish------\n'
            f'*–ù–æ–º–µ—Ä fish:* _{str(fish.fish_number)}_\n'
            f'*–î–∞—Ç–∞ fish:* _{str(fish.fish_date)}_\n'
            f'*–í–µ—Å:* _{str(fish.weight)} –∫–≥_\n'
            f'*–ö–æ–ª-–≤–æ –º–µ—à–∫–æ–≤:* _{str(fish.sack_count)}_\n'
            f'*–°–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:* _{str(fish.sending_method)}_\n')
    await callback.message.answer(text, parse_mode="Markdown")


@router.callback_query(F.data.startswith('all_data_order'))
async def check_income_order_3(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    order = data['order']
    text = (f'------–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞------\n'
            f'*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:* _{str(order.create_date)}_\n'
            f'*–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:* _{str(order.change_date)}_\n'
            f'*–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:* _{str(order.internal_article)}_\n'
            f'*–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:* _{str(order.vendor_internal_article)}_\n'
            f'*–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ S:* _{str(order.quantity_s)}_\n'
            f'*–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ M:* _{str(order.quantity_m)}_\n'
            f'*–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ L:* _{str(order.quantity_l)}_\n'
            f'*–¶–≤–µ—Ç:* _{str(order.color)}_\n'
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:* _{str(order.shop_name)}_\n'
            f'*–°–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:* _{str(order.sending_method)}_\n'
            f'*–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:* _{str(order.status)}_\n')
    await callback.message.answer(text, parse_mode="Markdown")


@router.callback_query(F.data == 'close_order')
async def check_income_order_4(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    # if not await shipments_ready(data['order'].id):
    #     await callback.message.answer('*–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –∞—Ä—Ö–∏–≤, —Ç.–∫ –Ω–µ –≤—Å–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ WB*', parse_mode='Markdown')
    # else:
    await state.set_state(check_orders.close_order)
    await callback.message.answer(f'*–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ S:* _{data["remain_s"]}_ *M:* _{data["remain_m"]}_ *L:* _{data["remain_l"]}_\n'
                                      f'*–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –∞—Ä—Ö–∏–≤?*', reply_markup=static_kb.close_order, parse_mode='Markdown')


@router.callback_query(F.data == 'send_to_archive', check_orders.close_order)
async def check_income_order_5(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    try:
        await order_rq.set_status(data["order"].id, '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤')
        await callback.message.answer('*–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤*', parse_mode='Markdown')
        await state.clear()
    except Exception as e:
        await callback.message.answer(str(e))


@router.callback_query(F.data == 'back', check_orders.close_order)
async def check_income_order_6(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    try:
        await check_income_order_1(data['callback'], data['state'])
    except Exception as e:
        await callback.message.answer(str(e))


@router.callback_query(F.data == 'mark_order')
async def check_income_order_6(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    await order_rq.mark_order(data['order'].id)
    order = await order_rq.get_order(data['order'].id)
    if order.flag:
        await callback.message.answer('–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω')
    else:
        await callback.message.answer('–ó–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–º–µ—á–µ–Ω')