from datetime import datetime
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from app.id_config import recipients
from app.keyboards import async_keyboards as async_kb
from app.database import requests as rq

from app.states.create_cheque import create_cheque_state

router = Router()


"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ + —á–µ–∫-------------------------------------------------------------------------------"""


@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
async def edit_order_status(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id in recipients:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É:', reply_markup=await async_kb.all_incomes_recipients())


@router.callback_query(F.data.startswith('income_rec'))
async def check_income_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    income_id = str(callback.data)[10:]
    income_id = int(income_id)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑:', reply_markup=await async_kb.inline_all_orders(income_id))


@router.callback_query(F.data.startswith('edit_status_'))
async def edit_order_status_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(create_cheque_state.select_order)
    order_id = str(callback.data)[12:]
    await state.update_data(order_id=order_id)
    order = await rq.get_order(order_id)
    await state.set_state(create_cheque_state.select_status)
    await callback.message.answer_photo(caption=f'*------–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞------*\n'
                                                f'*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:* {str(order.date)}\n'
                                                f'*–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:* {str(order.change_date)}\n'
                                                f'*–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:* {str(order.internal_article)}\n'
                                                f'*–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:* {str(order.vendor_internal_article)}\n'
                                                f'*–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ S:* {str(order.S)}\n'
                                                f'*–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ M:* {str(order.M)}\n'
                                                f'*–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ L:* {str(order.L)}\n'
                                                f'*–¶–≤–µ—Ç:* {str(order.color)}\n'
                                                f'*–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:* {str(order.vendor_name)}\n'
                                                f'*–°–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:* {str(order.sending_method)}\n'
                                                f'*–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:* {str(order.order_status)}\n',
                                        photo=order.order_image_id,
                                        reply_markup=await async_kb.inline_order_status(), parse_mode="Markdown")


@router.callback_query(F.data.startswith('status_'), create_cheque_state.select_status)
async def edit_order_status_2(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    order_status = str(callback.data)[7:]
    data = await state.get_data()
    order = await rq.get_order(data['order_id'])
    if order_status == '–ì–æ—Ç–æ–≤' and await rq.get_cheque_by_orderid(data['order_id']) is None:
        await state.update_data(order_status=order_status)
        await state.set_state(create_cheque_state.insert_date_cheque)
        await callback.message.answer('–í–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫')
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∞ —á–µ–∫–µ(–ø—Ä–∏–º–µ—Ä 03-04-2024 15:34):')
    elif (order_status == '–ü–µ—Ä–µ–¥–∞–Ω –≤ –ª–æ–≥–∏—Å—Ç–∏–∫—É' and await rq.get_fish(data['order_id']) is None
          and await rq.get_cheque_by_orderid(data['order_id']) is not None):
        await state.update_data(order_status=order_status)
        await state.set_state(create_cheque_state.insert_fact_s)
        await callback.message.answer('–í–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ '
                                      '—Ç–æ–≤–∞—Ä–∞')
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ S:')
    elif (order_status == '–ü–µ—Ä–µ–¥–∞–Ω –≤ —Ä–∞–±–æ—Ç—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É' and await rq.get_cheque_by_orderid(data['order_id']) is None
          and order.order_status == '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω'):
        await state.update_data(order_status=order_status)
        await state.update_data(order_change_date=datetime.now().strftime("%d-%m-%Y %H:%M:%S"))
        data = await state.get_data()
        await rq.edit_order_status(data['order_id'], data['order_status'], data['order_change_date'])
        await callback.message.answer('–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
    else:
        await callback.message.answer('–ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')


@router.message(create_cheque_state.insert_date_cheque)
async def insert_cheque_date(message: Message, state: FSMContext):
    try:
        message_date = str(message.text)
        cheque_date = datetime.strptime(message_date, "%d-%m-%Y %H:%M")
        if cheque_date <= datetime.now():
            await state.update_data(cheque_date=cheque_date.strftime("%d-%m-%Y %H:%M"))
            await state.set_state(create_cheque_state.insert_cheque_number)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞:')
        else:
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º {datetime.now().strftime("%d-%m-%Y %H:%M:%S")}')
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@router.message(create_cheque_state.insert_cheque_number)
async def insert_cheque_number(message: Message, state: FSMContext):
    try:
        cheque_number = int(message.text)
        await state.update_data(cheque_number=cheque_number)
        await state.set_state(create_cheque_state.insert_vendor_article)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:')
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@router.message(create_cheque_state.insert_vendor_article)
async def insert_vendor_article(message: Message, state: FSMContext):
    try:
        vendor_article = int(message.text)
        await state.update_data(vendor_article=vendor_article)
        await state.set_state(create_cheque_state.insert_price_cheque)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:')
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@router.message(create_cheque_state.insert_price_cheque)
async def insert_price_cheque(message: Message, state: FSMContext):
    try:
        price = str(message.text)
        await state.update_data(price=price)
        await state.set_state(create_cheque_state.insert_image_cheque)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞:')
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@router.message(create_cheque_state.insert_image_cheque)
async def insert_image_cheque(message: Message, state: FSMContext):
    try:
        await state.update_data(image=message.photo[-1].file_id)
        await state.update_data(order_change_date=datetime.now().strftime("%d-%m-%Y %H:%M:%S"))
        await state.update_data(date=datetime.now().strftime("%d-%m-%Y %H:%M:%S"))
        data = await state.get_data()
        order = await rq.get_order(data['order_id'])
        await rq.create_cheque_db(order.vendor_name, data['price'], data['image'], data['order_id'],
                                  data['cheque_date'], data['cheque_number'], data['vendor_article'], data['date'])
        await rq.edit_order_status(data['order_id'], data['order_status'], data['order_change_date'])
        await rq.set_order_cheque_image(data['order_id'], data['image'])
        order = await rq.get_order(data['order_id'])
        await message.answer(f'–ß–µ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ\n'
                             f'üî¥–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä *{order.sack_number}*\n'
                             f'–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ –Ω–∞–Ω–µ—Å—Ç–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –º–µ—à–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {order.internal_article}'
                             , parse_mode="Markdown")
        await message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {data['order_status']}")
        await state.clear()
    except TypeError:
        await message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
