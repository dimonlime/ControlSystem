from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.id_config import senders, recipients
from app.keyboards import static_keyboards as static_kb
from app.keyboards import async_keyboards as async_kb
from aiogram.types import CallbackQuery, Message, InputMediaPhoto, InputMediaDocument
from app.database.requests import cheque_request as cheque_rq
from app.database.requests import order_request as order_rq
from app.database.requests import fish_request as fish_rq
from app.database.requests import shipment_request as ship_rq
from app.states.cheque import view_cheque_state

router = Router()


@router.message(F.text == '–ì–æ—Ä—è—â–∏–µ —á–µ–∫–∏')
async def check_all_orders(message: Message, state: FSMContext):
    await state.set_state(view_cheque_state.select_cheque)
    await message.answer('–°–ø–∏—Å–æ–∫ –≥–æ—Ä—è—â–∏—Ö —á–µ–∫–æ–≤:', reply_markup=await async_kb.fire_cheques())


@router.message(F.text == '–ß–µ–∫–∏ —Å –æ—Ç—Å—Ä–æ—á–∫–æ–π')
async def check_all_orders(message: Message, state: FSMContext):
    await state.set_state(view_cheque_state.select_cheque)
    await message.answer('–°–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤ —Å –æ—Ç—Å—Ä–æ—á–∫–æ–π:', reply_markup=await async_kb.delay_cheques())


@router.message(F.text == '–ê—Ä—Ö–∏–≤ —á–µ–∫–æ–≤')
async def check_all_orders(message: Message, state: FSMContext):
    await state.set_state(view_cheque_state.select_cheque)
    await message.answer('–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤:', reply_markup=await async_kb.paid_cheques())


@router.callback_query(F.data.startswith('cheque_id_'), view_cheque_state.select_cheque)
async def view_cheque(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    cheque_id = str(callback.data)[10:]
    cheque = await cheque_rq.get_cheque_2(cheque_id)
    shipment = await ship_rq.get_shipment(cheque.shipment_id)
    order = await order_rq.get_order(shipment.order_id)
    await state.update_data(cheque=cheque, order=order, shipment=shipment)
    reply_markup = None
    caption = (f'*–¶–µ–Ω–∞* _{cheque.price}_*$*\n'
               f'*–î–∞—Ç–∞* _{cheque.date}_\n'
               f'*–ê—Ä—Ç:* _{order.internal_article}_\n'
               f'*S:* _{shipment.quantity_s}_ *M:* _{shipment.quantity_m}_ *L:* _{shipment.quantity_l}_\n')
    if callback.from_user.id in senders:
        reply_markup = static_kb.pay_cheque
    elif callback.from_user.id in recipients:
        reply_markup = None
    if cheque.cheque_status == '–ß–µ–∫ –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 2-—É—Ö –Ω–µ–¥–µ–ª—å':
        caption += f'üî¥*–°—Ç–∞—Ç—É—Å:* _{cheque.cheque_status}_'
    elif cheque.cheque_status == '–ü–æ —á–µ–∫—É –∏–º–µ–µ—Ç—Å—è –æ—Ç—Å—Ä–æ—á–∫–∞':
        caption += f'üü†*–°—Ç–∞—Ç—É—Å:* _{cheque.cheque_status}_'
    await callback.message.answer_photo(caption=caption,
                                        photo=cheque.cheque_image_id, reply_markup=reply_markup, parse_mode="Markdown")


@router.callback_query(F.data == 'pay_cheque')
async def view_cheque(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã:')
    await state.set_state(view_cheque_state.insert_payment_image)


@router.message(view_cheque_state.insert_payment_image)
async def check_all_orders(message: Message, state: FSMContext):
    try:
        payment_image_id = message.photo[-1].file_id
        data = await state.get_data()
        await cheque_rq.insert_payment_image(data['cheque'].id, payment_image_id)
        await message.answer('–ß–µ–∫ –æ–ø–ª–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        cheque = await cheque_rq.get_cheque_2(data['cheque'].id)
        await state.update_data(cheque=cheque)
        data = await state.get_data()
        for chat_id in recipients:
            if chat_id != message.chat.id:
                media_list = [InputMediaPhoto(media=data['cheque'].cheque_image_id,
                                              caption=f'üî¥*–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —á–µ–∫–∞*üî¥\n'
                                                      f"*–ê—Ä—Ç:* _{data['order'].internal_article}_\n"
                                                      f"*–¶–µ–Ω–∞:* _{data['cheque'].price}_*$*\n"
                                                      f"*–î–∞—Ç–∞ —á–µ–∫–∞:* _{data['cheque'].date}_\n"
                                                      f"*–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞* *S:* _{data['shipment'].quantity_s}_ *M:* _{data['shipment'].quantity_m}_ *L:* _{data['shipment'].quantity_l}_\n",
                                              parse_mode="Markdown"),
                              InputMediaPhoto(media=data['cheque'].payment_image)]
                await message.bot.send_media_group(media=media_list, chat_id=chat_id)
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@router.callback_query(F.data.startswith('paid_cheque_id_'), view_cheque_state.select_cheque)
async def view_cheque(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    cheque_id = str(callback.data)[15:]
    cheque = await cheque_rq.get_cheque_2(cheque_id)
    shipment = await ship_rq.get_shipment(cheque.shipment_id)
    order = await order_rq.get_order(shipment.order_id)
    media_list = []
    media_list.append(InputMediaPhoto(media=cheque.cheque_image_id,
                                      caption=
                                      f'*–¶–µ–Ω–∞* _{cheque.price}_*$*\n'
                                      f'*–î–∞—Ç–∞* _{cheque.date}_\n'
                                      f'*–ê—Ä—Ç:* _{order.internal_article}_\n'
                                      f'*S:* _{shipment.quantity_s}_ *M:* _{shipment.quantity_m}_ *L:* _{shipment.quantity_l}_\n'
                                      f'üü¢*–°—Ç–∞—Ç—É—Å:* _{cheque.cheque_status}_', parse_mode="Markdown"))
    media_list.append(InputMediaPhoto(media=cheque.payment_image))
    await callback.message.answer_media_group(media=media_list)
